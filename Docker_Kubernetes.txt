#########################
# Como crear Dockerfile #
########################

	1.- Crear una imagen que corra "Redis-server".

	.- Crear una carpeta:
		$ mkdir redis-image

		cd redis-image

	.- Se crea el fichero "Dockerfile" con la siguiente estructura:

		FROM image   --> Usa una imagen existente como Base
  
		RUN [comandos a ejecutar] --> Descarga e instala una dependencia

		CMD ["redis-image"] --> Le dice a la imagen que hacer cuando arranca como un contender.



	.- Se ejecuta el fichero :  docker build .

	.- Se ejecuta el contenedor : docker run HASH


	
   		DIAGRAMA:

		Instruction Telling
		Docker Server				Argument to the instruccion
		what to to				    instruction
               ---------------				-----------------------------

		FROM					     alpine
		
		RUN					     apk add --update redis   ->  apk = Manager Package


		CMD					     ["redis-server"]



	EJEMPLO:


➜  redis-image docker build .
	Sending build context to Docker daemon  2.048kB
Step 1/3 : FROM alpine
	latest: Pulling from library/alpine
	6c40cc604d8e: Pull complete 
	Digest: sha256:b3dbf31b77fd99d9c08f780ce6f5282aba076d70a513a8be859d8d3a4d0c92b8
	Status: Downloaded newer image for alpine:latest
	 ---> caf27325b298
Step 2/3 : RUN apk add --update redis
	 ---> Running in 476c7a898a88
	fetch http://dl-cdn.alpinelinux.org/alpine/v3.9/main/x86_64/APKINDEX.tar.gz
	fetch http://dl-cdn.alpinelinux.org/alpine/v3.9/community/x86_64/APKINDEX.tar.gz
	(1/1) Installing redis (4.0.12-r0)
	Executing redis-4.0.12-r0.pre-install
	Executing redis-4.0.12-r0.post-install
	Executing busybox-1.29.3-r10.trigger
	OK: 7 MiB in 15 packages
	Removing intermediate container 476c7a898a88
	 ---> 392a45251ad7
Step 3/3 : CMD ["redis-server"]
	 ---> Running in ca33664cfe51
	Removing intermediate container ca33664cfe51
	 ---> c1543f765ee1
Successfully built c1543f765ee1




		WRITING A DOCKERFILE == BEING GIVEN A COMPUTER WITH NO OS AND BEING TOLD TO INSTALL GOOGLE CHROME.


	FLOW	How do you install Chrome on a Computer with no operation System??
	|	--------------------------------------------------------------------
	|		Install an operating system    ---> Specify a Base Image 
	|
	|		Start up your default Browser  |
	|					       |	 
	|		Navigate to Chrome.google.com  |
	|					       |	
	|		Download installer	       |---> Run Commands to install additional programs	
	|					       |	  
	|		Open File/Folder Explorer      |
	| 					       |	
	|		Execute chrome_installer.exe   |
	|
	|		Execute chrome.exe	       ----> Command to run on Startup	  
	v


		Why did we use "alpine" as a base image???
		------------------------------------------
				  |
				  |
				  |
				  v

			Why do you use Windows,
			  MacOS, or Ubuntu??

			          |
				  |
				  v
		 They come with a preinstalled set of 
		  programs that are useful to you ¡¡¡



	Dockerfile ---> Docker ---> Docker ---> Usable
			Client	    Server	 Image !	


		

#####################################################################################################
GRAFICO DE LOS PASOS QUE SE REALIZAN PARA LANZAR EL CONTENEDOR
####################################################################################################

		FROM    -----------------> alpine
				|
				|
				v
	|----------->	Download alpine Image
        |
        |
	|	RUN 	apk add --update redis
        |
	--------------- Get image from previous Step
			
			Create a container out of it   ---> Container !
		
			Run 'apk add --update redis' -----> Container! with modified FS
				in it                	

			Take Snapshot of that	     -----> FS Snapshot 
			container's FS       

			Shutdown that temporary
			   container

	|------------>	Get image ready for next
	|		   instruccion
	|
	|
	|	CMD      ["redis-server"]
	|
	--------------	Get image from last step

			Create a container out of it  -----> Container !
		
			Tell container is should run
			   'redis-server' when started ----> Container ! with modified primary command

			Shut down that temporary
			   container

			Get image ready for next
			   instruccion


			NO MORE STEPS ¡¡¡¡

			OUTPUT IS THE IMAGE GENERATED FROM PREVIUS STEP
			


-----------------------------------------------------
	EJEMPLO 2 CON VARIOS RUN
-----------------------------------------------------
➜  redis-image docker build .         
Sending build context to Docker daemon  2.048kB
Step 1/4 : FROM alpine
	 ---> caf27325b298
Step 2/4 : RUN apk add --update redis
	 ---> Using cache
	 ---> 392a45251ad7
Step 3/4 : RUN apk add --update gcc
	 ---> Running in 76c096372fb0
	fetch http://dl-cdn.alpinelinux.org/alpine/v3.9/main/x86_64/APKINDEX.tar.gz
	fetch http://dl-cdn.alpinelinux.org/alpine/v3.9/community/x86_64/APKINDEX.tar.gz
	(1/10) Installing binutils (2.31.1-r2)
	(2/10) Installing gmp (6.1.2-r1)
	(3/10) Installing isl (0.18-r0)
	(4/10) Installing libgomp (8.2.0-r2)
	(5/10) Installing libatomic (8.2.0-r2)
	(6/10) Installing libgcc (8.2.0-r2)
	(7/10) Installing mpfr3 (3.1.5-r1)
	(8/10) Installing mpc1 (1.0.3-r1)
	(9/10) Installing libstdc++ (8.2.0-r2)
	(10/10) Installing gcc (8.2.0-r2)
	Executing busybox-1.29.3-r10.trigger
OK: 93 MiB in 25 packages
	Removing intermediate container 76c096372fb0
	 ---> 105e7db025f7
Step 4/4 : CMD ["redis-server"]
	 ---> Running in 0c8e809b529a
	Removing intermediate container 0c8e809b529a
	 ---> 5115ab63b437
Successfully built 5115ab63b437

 NOTA: Si cambiamos el orden de los RUN la construccion del contenedor cambiará drasticamente. Esto quiere decir que volvera a reconstruir la imagen creando 
	contenedores temporales en vez de usar la cache.


******************************************************
TAGGING AN IMAGE
*****************************************************


	Docker | build | -t stephengrider/redis:latest |  .   } Especifica el directorio.

					|
					v
				   Tags the Image

					|
					v
			 Your Docker ID /    redis         :  latest
			  
			 stephengrider   Repo/Proyect Name    Version



-----------------------------------
IMAGE GENERATOR WITH DOCKER COMMIT
----------------------------------

	      |-> Container --> Image	 
	IMAGE |
	      |-> Container --> 



EJEMPLO:
--------

➜  redis-image docker ps
	CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
	376266e85aec        alpine              "sh"                49 seconds ago      Up 47 seconds                           gracious_galois

➜  redis-image docker commit -c 'CMD ["redis-server"]' 376266e85aec
	sha256:9c38b86daba06ba7031d0b6c07331a1473c72485c9d6dbbcfddf7bf8ea9b057a
➜  redis-image docker run 9c38b86daba06
	1:C 01 Mar 07:31:18.194 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo
	1:C 01 Mar 07:31:18.194 # Redis version=4.0.12, bits=64, commit=1be97168, modified=0, pid=1, just started
	1:C 01 Mar 07:31:18.194 # Warning: no config file specified, using the default config. In order to specify a config file use redis-server /path/to/redis.conf
	1:M 01 Mar 07:31:18.196 * Running mode=standalone, port=6379.
	1:M 01 Mar 07:31:18.196 # WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.
	1:M 01 Mar 07:31:18.196 # Server initialized
	1:M 01 Mar 07:31:18.196 # WARNING overcommit_memory is set to 0! Background save may fail under low memory condition. To fix this issue add 'vm.overcommit_memory = 1' to /etc/sysctl.conf and then reboot or run the command 'sysctl vm.overcommit_memory=1' for this to take effect.
	1:M 01 Mar 07:31:18.196 # WARNING you have Transparent Huge Pages (THP) support enabled in your kernel. This will create latency and memory usage issues with Redis. To fix this issue run the command 'echo never > /sys/kernel/mm/transparent_hugepage/enabled' as root, and add it to your /etc/rc.local in order to retain the setting after a reboot. Redis must be restarted after THP is disabled.
	1:M 01 Mar 07:31:18.196 * Ready to accept connections

	

 *****************************
* PROYECT OUTLINE
*****************************

	STEPS:
	     |	Create NODE JS Web App
	     |	Create a Dockerfile
	     |	Build image from dockerfile
	     |	Run image as container
	     |	Connect to web app from a Browser
	     v


		|-> Have to install 
	Node JS |    dependencies before  --> Install deps by running --> Assume 'npm' is
	 Apps   |	running the app		'npm install'		    installed!
		|
		|-> Have to run a command  --> Start server by running --> Assume 'npm' is
			to start up the		  'npm start'		    installed!
			   server



		TEMPLATE 			REDIS				NODE
		--------------------		------------------		----------------
	FLOW|    Specify a base    -->		FROM alpine	-->		FROM alpine
	    |	image
  	    |
  	    |	Run some commands 		RUN apk add --update -->	RUN npm install
	    |	to install additional  --> 	redis
	    |	programs
            |
            |
	    |	Specify a command to run -->	CMD ["redis-server"] ---> 	CMD ["npm", "start"]
	    |	on container startup
	    v





	COPY --> ./ 				./
	
		Path to	folder		Place to copy stuff	
		to copy from		to inside *the
		on *your machine*	container*
		relative to build
		context	



	[ Docker Run with Port Mapping ]


	docker 	 run 	-p  	8080 	 : 	8080  	<image id>
				 |		  |
				 v		  v
			    Route incoming     ..This port
			    request to this    inside the container
			    port on local host	
				to...



	WORKDIR --> /usr/app
			|
			v
			Any following command
			will be executed relative
			to this path in the 
			container.




**********************
	APP OVERVIEW *
*********************

	https://localhost:4001  --> Node App --> REDIS
						 Visits = 10




			     |-> Docker Container [Node App] -|	
			     |				      |	 
	WEB PAGE [Visit =10] |-> Docker Container [Node App] -|--> Docker Container [REDIS]
			     |				      |	
			     |-> Docker Container [Node App] -|
